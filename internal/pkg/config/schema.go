// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/manifest.json (1.841kB)

package config

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasManifestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x95\x51\x6e\xdb\x30\x0c\x86\xdf\x7d\x0a\x41\xdb\xa3\x1b\x63\xaf\x3e\xc3\x6e\x30\x04\x83\x22\xd3\xb6\x3a\x8b\xf4\x28\x39\x6b\x50\xe4\xee\x83\x64\x25\xd3\xdc\x78\xcb\x1c\xac\x4f\x6a\x29\x7e\x14\xc9\xff\x4f\xf2\x5a\x08\x21\x3f\x3a\xdd\x83\x55\xb2\x16\xb2\xf7\x7e\xac\xab\xea\xd9\x11\x3e\xcd\xd1\x1d\x71\x57\xcd\x7f\x7e\x90\x65\x4c\x37\xcd\x25\xd5\xd5\x55\xd5\x19\xdf\x4f\x87\x9d\x26\x5b\x7d\x63\xe3\x3c\xb5\x2d\xb0\xea\x87\xaa\xa3\x27\x0d\xe8\xf9\x94\x70\x57\x59\x85\xa6\x05\xe7\x77\xa1\xbe\x2c\x8b\x50\xcd\x9f\x46\x08\xe5\xe8\xf0\x0c\xda\xcf\x2f\x8c\x4c\x23\xb0\x37\xe0\x64\x2d\x42\x8b\x42\x48\xa7\xd9\x8c\xfe\x57\x20\x43\x15\xb3\x3a\x45\x32\x86\x8d\x07\x9b\xe7\x65\x99\xce\xb3\xc1\x4e\xa6\x8b\x73\x3c\xcf\x33\x28\x35\x59\xab\xb0\x79\xf0\x85\x6c\x8c\x74\x73\x63\x98\x74\x83\xca\x06\xe6\xf5\x4d\x7f\xa5\x90\xd6\xe0\x67\xc0\xce\xf7\xb2\x16\x9f\x2e\x3d\x5e\x2a\xaa\x18\xfe\x67\xae\x87\x61\xdc\xc2\x35\x30\x2f\xdf\x10\x6e\xc1\x15\x22\x79\x15\x68\xf7\x3b\x9e\x76\x95\x74\xc8\xb4\x88\x18\xc3\xf7\xc9\x30\x04\xaf\x7d\x49\xbb\x2a\xd3\xec\x62\x7f\x53\x41\x1a\xaf\x8f\xbc\x8f\x80\x89\xb9\xb9\x11\xc0\xc9\x86\xd6\xb3\xd0\x81\x68\x08\xa7\x83\x21\x3c\xb1\x5f\xec\x69\xab\x1d\x5c\x4f\xec\xef\x02\xc3\xff\xea\x65\xb5\x10\xe0\xf1\xeb\xd6\x26\x1e\xf4\x48\x03\xad\x9a\x86\xfb\xa6\xf8\x1f\xf6\x8a\x4c\x99\x34\x58\xb1\x97\x26\x6c\x4d\x77\xcb\x5d\x0b\xcf\xac\x39\x66\x9b\xc2\xf2\x08\xec\xb6\xac\x55\x0e\xd4\xad\x38\xf6\xad\xcb\xff\xe4\xf3\x50\x0a\x8e\x30\xfc\xd5\xea\x0d\x1c\xa6\x18\x31\xd8\x52\x38\x7f\x28\xc6\x98\xc1\x4c\x3c\x7f\x7c\xd1\xe8\xa5\xf3\xe3\xdb\xd0\x9a\x97\x3b\x47\xcc\xd0\x4c\xdb\x62\xa1\xf1\xca\x17\xc8\x65\x9b\x49\xe4\x80\x45\x64\x91\x7e\xfd\x35\x28\xaf\xc2\x8b\x7d\x71\x2e\x7e\x06\x00\x00\xff\xff\x4a\x7c\xb4\xc0\x31\x07\x00\x00")

func schemasManifestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasManifestJson,
		"schemas/manifest.json",
	)
}

func schemasManifestJson() (*asset, error) {
	bytes, err := schemasManifestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/manifest.json", size: 1841, mode: os.FileMode(0644), modTime: time.Unix(1580210584, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x15, 0xc6, 0x93, 0xc2, 0xc1, 0x9b, 0xe4, 0xde, 0xe2, 0x9d, 0xac, 0xaf, 0x15, 0x52, 0x34, 0xc1, 0x2b, 0x3d, 0xf1, 0x55, 0x31, 0x1d, 0x49, 0xcc, 0x34, 0x69, 0xcd, 0xd8, 0x21, 0x24, 0x73, 0xb7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/manifest.json": schemasManifestJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": &bintree{nil, map[string]*bintree{
		"manifest.json": &bintree{schemasManifestJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
